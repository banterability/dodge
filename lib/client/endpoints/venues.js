// Generated by CoffeeScript 1.7.1
(function() {
  var hasRequiredParamsForVenueSearch, requireVenueId;

  hasRequiredParamsForVenueSearch = function(options) {
    if (options.intent === 'browse') {
      return ((options.ll != null) && (options.radius != null)) || ((options.ne != null) && (options.sw != null)) || ((options.near != null) && (options.radius != null));
    } else {
      return (options.ll != null) || (options.near != null);
    }
  };

  requireVenueId = function(options) {
    if (!options.venueId) {
      throw new Error("Missing required venueId");
    }
    return options.venueId;
  };

  module.exports = function(client) {
    return {
      venues: {
        categories: function(callback) {
          return client.fetch('venues/categories', {}, function(err, data) {
            var _ref;
            return callback(err, data != null ? (_ref = data.response) != null ? _ref.categories : void 0 : void 0);
          });
        },
        search: function(options, callback) {
          if (options == null) {
            options = {};
          }
          if (!hasRequiredParamsForVenueSearch(options)) {
            throw new Error("Missing location parameter(s)");
          }
          return client.fetch('venues/search', options, function(err, data) {
            var _ref;
            return callback(err, data != null ? (_ref = data.response) != null ? _ref.venues : void 0 : void 0);
          });
        },
        detail: function(options, callback) {
          var venueId;
          if (options == null) {
            options = {};
          }
          venueId = requireVenueId(options);
          return client.fetch("venues/" + venueId, {}, function(err, data) {
            var _ref;
            return callback(err, data != null ? (_ref = data.response) != null ? _ref.venue : void 0 : void 0);
          });
        },
        events: function(options, callback) {
          var venueId;
          if (options == null) {
            options = {};
          }
          venueId = requireVenueId(options);
          return client.fetch("venues/" + venueId + "/events", {}, function(err, data) {
            var _ref;
            return callback(err, data != null ? (_ref = data.response) != null ? _ref.events : void 0 : void 0);
          });
        },
        hours: function(options, callback) {
          var venueId;
          if (options == null) {
            options = {};
          }
          venueId = requireVenueId(options);
          return client.fetch("venues/" + venueId + "/hours", {}, function(err, data) {
            return callback(err, data != null ? data.response : void 0);
          });
        },
        likes: function(options, callback) {
          var venueId;
          if (options == null) {
            options = {};
          }
          venueId = requireVenueId(options);
          return client.fetch("venues/" + venueId + "/likes", {}, function(err, data) {
            var _ref;
            return callback(err, data != null ? (_ref = data.response) != null ? _ref.likes : void 0 : void 0);
          });
        },
        links: function(options, callback) {
          var venueId;
          if (options == null) {
            options = {};
          }
          venueId = requireVenueId(options);
          return client.fetch("venues/" + venueId + "/links", {}, function(err, data) {
            var _ref;
            return callback(err, data != null ? (_ref = data.response) != null ? _ref.links : void 0 : void 0);
          });
        },
        nextvenues: function(options, callback) {
          var venueId;
          if (options == null) {
            options = {};
          }
          venueId = requireVenueId(options);
          return client.fetch("venues/" + venueId + "/nextvenues", {}, function(err, data) {
            var _ref;
            return callback(err, data != null ? (_ref = data.response) != null ? _ref.nextVenues : void 0 : void 0);
          });
        }
      }
    };
  };

}).call(this);
